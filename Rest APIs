int func(struct match_score *array, int len) {
  
  
  int i, j;
  int no_century_countries = 0;
  float avg = 0;
  /* struct to hold (country-name,num_centuries) pairs */
  typedef struct {
    char country[30];
    int num_centuries;
  } info_t;
  info_t *tmp = (info_t *)malloc(len*sizeof(info_t));

  
  for (i=0; i<len; i++) {
    strncpy(tmp[i].country, array[i].country, sizeof(tmp[i].country));
    tmp[i].num_centuries = array[i].score >= 100 ? 1 : 0;  
  }

  
  for (i=0; i<len; i++) {

    if (!*tmp[i].country)
        continue;
    for (j=i+1; j<len; j++) {
      if (!*tmp[j].country)
        continue;                 /* this country is disabled so
                                     don't process it */
      
      if (strcmp(array[i].country, array[j].country) == 0) {
        tmp[i].num_centuries += tmp[j].num_centuries;
                                  
        tmp[j].country[0] = '\0'; /* Disable the `j_th` element 
                                     so it does not get counted again */
      }
    }
  }

  for (i=0; i<len; i++)
    if (tmp[i].num_centuries == 0 && tmp[i].country[0] != '\0')
      no_century_countries++;

  return no_century_countries;
}



Mail App, Authentication API, v6
Mail App, Data Storage API, v10
Mail App, Search API, v6

Video Call App, Authentication API, v7
Video Call App, Data Storage API, v11
Video Call App, Video Compression API, v3

Chat App, Authentication API, v8
Chat App, Data Storage API, v11
Chat App, Presence API, v2

A company has a number of mobile apps that they sell to customers, and each app uses one or more REST APIs. All REST APIs are given version numbers like v1, v2, v3, ... etc. which are incremented each time the REST API team releases a new version of the API to the app teams.

Consider a file input.txt which contains information about which versions of the various APIs are being used by the current release of each app of the company:

Mail App, Authentication API, v6
Video Call App, Authentication API, v7
Mail App, Data Storage API, v10
Chat App, Data Storage API, v11
Mail App, Search API, v6
Chat App, Authentication API, v8
Chat App, Presence API, v2
Video Call App, Data Storage API, v11
Video Call App, Video Compression API, v3
Each line of this file consists of 3 comma-separated fields. The first field is a app name, the second field is a API name, and the third field is the API version number used by that app. The example given above indicates that the Mail App, uses version v6 of the Authentication API, and the Video Call App uses version v7 of the Authentication API, and the Mail App also uses version v10 of the Data Storage API, and so on. For the purposes of this program, assume that all version numbers are of the form v<digits> where <digits> represents one or more decimal digits.

Write a program in a language of your choice (although we prefer C/C++/Python) that reads this file, figures out which is the latest version number of each API, and then prints the names of apps which are using the latest version of all the APIs that it uses. Special Note: if a API has only one version, then that version is obviously considered the latest version.

Thus, in case of the example input given above, the output of your program should be:

Chat App
because Chat App is using 3 APIs, and it is using the latest versions of all 3 of those APIs. Mail App is not listed, because it is using oldest versions of the Authentication API as well as the Data Storage API, and Video Call App is not listed because it is using an older version of the Authentication API. Please read the example carefully to understand exactly what you're expected to do.

Important notes:

You must write your program in a single file, and copy-paste the program below. In case you want to write a program with multiple-classes, use inner classes.
